# ZIO Raft Troubleshooting Guide

## Rating System

The rule's status is automatically managed by Cursor based on usage metrics:

- ðŸ”´ **experimental** (default): New pattern, limited validation
- ðŸŸ¡ **beta**: Validated but needs monitoring
- ðŸŸ¢ **stable**: Well-established and safe for widespread use

Status upgrades happen automatically when:
- **experimental â†’ beta**: 5+ implementations with 90%+ success rate
- **beta â†’ stable**: 15+ implementations across 3+ different projects

## Core Standards

### 1. ZIO Effect Sequencing Bug (Rating: 5)

**Problem**: Using plain semicolon or newline to sequence ZIO effects can cause race conditions where the second effect starts before the first effect completes.

**Symptoms**:
- Test timeouts, especially in tests involving state mutations followed by reads
- Promises that await indefinitely
- Race conditions that only appear sometimes
- Effects appearing to complete but their side effects not being visible

**Root Cause**:
```scala
// WRONG - Effect sequencing bug:
raftState.set(l.withPendingRead(entry))
promise.await  // Could start before state actually set!

// CORRECT - Guaranteed sequencing:
raftState.set(l.withPendingRead(entry)) *>  
promise.await  // Guaranteed to wait for state update first
```

**Detection Strategy**:
- Look for patterns where state mutation is followed immediately by operations that depend on that state
- Search for promises or awaits that happen after state changes
- Check for `Ref.set()` or similar state mutations not properly sequenced

**Prevention**:
- Always use `*>` (zipRight) when the second effect depends on the completion of the first
- Use `flatMap` when you need to pass values between effects
- Be especially careful with `Ref.set()` followed by operations that read that state

**Example Fix**:
```scala
// Before (buggy):
for {
  l <- raftState.get
  entry = PendingRead(readId, promise)
  _ <- raftState.set(l.withPendingRead(entry))
  result <- promise.await  // Race condition!
} yield result

// After (correct):
for {
  l <- raftState.get
  entry = PendingRead(readId, promise)
  result <- raftState.set(l.withPendingRead(entry)) *> promise.await
} yield result
```

## Scope

This troubleshooting guide applies to ZIO Raft implementation issues, focusing on patterns that cause subtle bugs and test failures.

## Rule Usage Tracking

The rule metrics are automatically updated through Cursor's rule engine when patterns from this guide are successfully applied to fix issues in the ZIO Raft project.

## Template for Adding New Issues

When new troubleshooting patterns are discovered:

1. **Add new section with Rating**
2. **Document Problem, Symptoms, Root Cause**
3. **Provide Detection Strategy and Prevention**
4. **Include Example Fix**
5. **Update scope if needed**
