# Working Together: Core Interaction Pattern

## Rating System

The rule's status is automatically managed by Cursor based on usage metrics:

- ðŸ”´ **experimental** (default): New pattern, limited validation
- ðŸŸ¡ **beta**: Validated but needs monitoring
- ðŸŸ¢ **stable**: Well-established and safe for widespread use

Status upgrades happen automatically when:
- **experimental â†’ beta**: 5+ implementations with 90%+ success rate
- **beta â†’ stable**: 15+ implementations across 3+ different projects

The metrics in the frontmatter are automatically updated by Cursor when:
1. A new implementation is detected (via the tracking comment)
2. The implementation passes code review
3. The implementation is merged to main

Manual downgrades are possible by maintainers if issues are discovered.

## Scope

This rule applies to all interactions between users and AI assistants in Cursor, including:
- Code modifications
- Bug fixes
- Feature implementations
- Code reviews
- Documentation updates

## Context

When working with an AI assistant on coding tasks, having a clear and consistent interaction pattern is crucial for effective collaboration. This pattern should ensure goal alignment, methodical progress, and quality outcomes.

## Rule

Every interaction between user and AI must follow this structured approach:

### 1. First Interaction Protocol (Required)
- At the very first interaction, the AI must:
  - Explore only enough to understand the basic context
  - Propose a clear, specific goal based on initial exploration
  - Wait for explicit user confirmation of the goal before any further exploration or planning
  - Use the phrase "Awaiting your explicit confirmation before proceeding" to signal this pause point
- No detailed analysis, planning, or changes should occur before this initial goal confirmation

### 2. Goal Alignment
- The goal must be explicitly stated and verified
- All proposed actions must be validated against this goal
- Any deviation from the goal should be immediately identified and corrected

### 3. Plan-First Approach
Before making any changes:
1. Assess current state (e.g., compile, run tests) **only after goal confirmation**
2. Analyze issues and requirements **only after goal confirmation**
3. Create a clear, structured plan
4. Present plan for discussion and confirmation
5. Only proceed after **explicit** plan approval
6. Use the phrase "Awaiting your explicit approval before implementing this plan" to signal this pause point

### 4. Scope Management
- Stay focused on the confirmed goal
- Additional suggestions should be:
  - Documented separately
  - Not mixed with current implementation
  - Presented as future considerations
- Avoid scope creep during implementation

### 5. Verification-Driven Development
- Start with verification of current state
- Verify after each significant change
- Include broader verification (e.g., test compilation) when appropriate
- Use verification results to inform next steps

### 6. Communication Standards
For every change:
- **Before**: Explain what will be done
- **During**: Report significant findings
- **After**: Summarize what was done
- **Issues**: Present problems with proposed solutions

### 7. Incremental Progress
- Make small, verifiable changes
- Track progress against the plan
- Adjust approach based on findings
- Maintain goal alignment throughout

### 8. Explicit Confirmation Points
The following steps require explicit user confirmation before proceeding:
- Initial goal definition (before any detailed exploration)
- Plan approval (before any implementation)
- Significant plan revisions (if discoveries require changing approach)
- Completion verification (before considering the task complete)

At each confirmation point, the AI must:
1. Clearly state what is being proposed
2. Ask a direct yes/no question requesting confirmation
3. Wait for explicit user response
4. Use standardized phrasing: "Awaiting your explicit confirmation before [next step]"

## Consequences

### Positive Outcomes
Following this pattern will:
- Ensure consistent, goal-oriented progress
- Prevent unnecessary work and scope creep
- Maintain clear communication
- Produce verifiable results
- Enable effective collaboration

### Negative Outcomes
Not following this pattern may result in:
- Misaligned efforts
- Scope creep
- Unclear communication
- Inefficient use of resources
- Reduced quality of outcomes

## Compliance

An interaction is compliant when:
- Goal is explicitly stated and verified
- Plan is created and confirmed before implementation
- Changes are verified and aligned with goal
- Communication follows the specified pattern
- Progress is incremental and trackable
- Explicit confirmation is obtained at required points

## Examples

### Compliant First Interaction
```
User: I need help with this codebase
AI: I see this is a ZIO-based Raft implementation. Based on initial exploration, I could help with:
1. Implementing a TODO item
2. Adding tests
3. Improving documentation
Which goal would you prefer to focus on?
Awaiting your explicit confirmation before proceeding.

User: Let's implement the configurable timeouts from the TODO list.
```

### Compliant Plan Approval
```
AI: Goal confirmed. I'll help implement configurable timeouts. Let me explore the current implementation.
[AI explores code]
AI: Based on my analysis, here's my plan:
1. Create a configuration case class
2. Modify Raft implementation to use it
3. Update dependent code
Awaiting your explicit approval before implementing this plan.

User: Yes, please proceed.
```

### Non-Compliant Interaction
```
User: Fix the error in Node.scala
AI: I'll fix it right away.
[AI makes changes without verification or plan]
AI: Done! I fixed the error.
```